---
name: Docker Image CI

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main

env:
  DOCKER_REPO_NAME: rogerrum
  DOCKER_IMAGE_NAME: docker-openttd

jobs:
  # Get list of versions
  get-latest-version:
    name: Get Latest Release Version for OpenTTD/OpenGFX
    runs-on: ubuntu-latest
    steps:
      - name: Get TTD Version
        id: get_ttd_version
        run: |
          # Fetch the latest stable release (exclude beta versions)
          echo "version=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenTTD/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')" >> "${GITHUB_OUTPUT}"

      - name: Get GFX Version
        id: get_gfx_version
        run: |
          # Fetch the latest stable release of OpenGFX (exclude beta versions)
          echo "version=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenGFX/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')" >> "${GITHUB_OUTPUT}"

      - name: Output Versions
        run: |
          # Output the versions for further use
          echo "Latest OpenTTD Release: ${{ steps.get_ttd_version.outputs.version }}"
          echo "Latest OpenGFX Release: ${{ steps.get_gfx.outputs.version }}"

    outputs:
      openttd: ${{ steps.get_ttd_version.outputs.version }}
      opengfx: ${{ steps.get_gfx_version.outputs.version }}

#  # Build openttd images
#  build:
#    runs-on: ubuntu-latest
#    needs: get-versions
#    strategy:
#      matrix:
#        version: ${{ fromJson(needs.get-versions.outputs.versions) }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Docker login - docker hub
#        uses: azure/docker-login@v1
#        with:
#          username: ${{ secrets.USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Docker login - ghcr
#        uses: azure/docker-login@v1
#        with:
#          login-server: ghcr.io
#          username: ${{ secrets.USERNAME }}
#          password: ${{ secrets.PASSWORD }}
#
#      - name: Set up Qemu
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Output platforms
#        run: |
#          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
#
#      - name: Build and push ${{ matrix.version }} with latest tag
#        if: needs.get-versions.outputs.latest == matrix.version
#        uses: docker/build-push-action@v4
#        with:
#          push: true
#          pull: true
#          platforms: linux/arm64,linux/amd64
#          build-args: |
#            OPENTTD_VERSION=${{ matrix.version }}
#            OPENGFX_VERSION=${{ needs.get-versions.outputs.opengfx }}
#          tags: |
#            ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#            ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ matrix.version }}
#            ghcr.io/${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#            ghcr.io/${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ matrix.version }}
#
#      - name: Build and push ${{ matrix.version }}
#        if: needs.get-versions.outputs.latest != matrix.version
#        uses: docker/build-push-action@v4
#        with:
#          push: true
#          pull: true
#          build-args: |
#            OPENTTD_VERSION=${{ matrix.version }}
#            OPENGFX_VERSION=${{ needs.get-versions.outputs.opengfx }}
#          tags: |
#            ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ matrix.version }}
#            ghcr.io/${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ matrix.version }}
#
#      # Trivy test
#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        id: trivy
#        with:
#          image-ref: 'ghcr.io/${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ matrix.version }}'
#          format: 'sarif'
#          exit-code: '0'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          severity: 'CRITICAL,HIGH'
#          output: results.sarif
#
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v2
#        if: always()
#        with:
#          sarif_file: 'results.sarif'
